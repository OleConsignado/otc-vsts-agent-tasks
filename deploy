#!/bin/bash

source <(otc-task-include lib/filesystem.sh)
source <(otc-task-include lib/vsts.sh)
source <(otc-task-include lib/dotnet.sh)
source <(otc-task-include lib/docker.sh)
source <(otc-task-include lib/helm.sh)
source <(otc-task-include lib/deploy.sh)
source <(otc-task-include lib/git.sh)
source <(otc-task-include lib/assert.sh)
source <(otc-task-include lib/console.sh)
source <(otc-task-include lib/vsts-pr-statuses.sh)

ORGANIZATION="oleconsignado"

# Param pullrequest_id
# Param commit_id
# Param namespace
# Param release_name
# Required environment variables:
#   - SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI
function publish-deploy-link-on-pr-feed
{
	local pullrequest_id=$1
	local commit_id=$2
	local namespace=$3
	local release_name=$4

	assert-not-empty pullrequest_id
	assert-not-empty commit_id
	assert-not-empty namespace
	assert-not-empty release_name
	assert-not-empty SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI

	local commit_short=$(echo $commit_id | egrep -o '^[0-9a-f]{8}')
	local preview_url="http://$(kubectl -n $namespace get ingress -l release=$release_name -ojson | \
		jq -r '.items[].spec.rules[].host')/"

	local comment_text="Foi publicado uma prévia da aplicação no endereço [$preview_url]($preview_url). \
A versão publicada corresponde ao commit \
[$commit_short]($SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI/commit/$commit_id) \
e ela estará disponível enquanto este *Pull Request* estiver aberto."
	local comment_id=$(vsts-comment-pull-request $pullrequest_id "$comment_text")
	vsts-pull-request-comment-change-status $pullrequest_id $comment_id 4 # 4 = closed
}

# Param namespace
# Param configuration
# Required environment variables:
#   - BUILD_REASON
#   - BUILD_BUILDID
#   - BUILD_SOURCESDIRECTORY
#   - Required if "$BUILD_REASON" = "PullRequest"
#     - SYSTEM_PULLREQUEST_PULLREQUESTID
#     - SYSTEM_PULLREQUEST_SOURCECOMMITID
function main
{
	local namespace=$1
	local configuration=$2

	assert-not-empty namespace
	assert-not-empty configuration
	assert-not-empty BUILD_REASON
	assert-not-empty BUILD_BUILDID
	assert-not-empty BUILD_SOURCESDIRECTORY

	local is_pullrequest=false
	local pullrequest_id=''

	if [ "$BUILD_REASON" = "PullRequest" ]
	then
		assert-not-empty SYSTEM_PULLREQUEST_SOURCECOMMITID
		assert-not-empty SYSTEM_PULLREQUEST_PULLREQUESTID
		is_pullrequest=true
		pullrequest_id=$SYSTEM_PULLREQUEST_PULLREQUESTID
	fi

	local artifact_suffix=''
	local tag=''

	if $is_pullrequest
	then
		artifact_suffix="-eph-pr$pullrequest_id"
		tag="$(echo $SYSTEM_PULLREQUEST_SOURCECOMMITID | \
			egrep -o '^[0-9a-f]{8}')-$BUILD_BUILDID"
	else
		tag="v$BUILD_BUILDID"
		assert-success prepare-local-repo-for-changes
	fi

	local solution_dir="$BUILD_SOURCESDIRECTORY/Source"
	local deployed_releases_list=$(mktemp --suffix="dep-rel-$BUILD_BUILDID")
	local pr_deploy_status='failed'

	if deploy "$solution_dir" "$configuration" "$tag" "$namespace" \
			"$artifact_suffix" > $deployed_releases_list
	then
		if $is_pullrequest
		then
			pr_deploy_status='succeeded'

			for release_name in $(cat "$deployed_releases_list")
			do		
				publish-deploy-link-on-pr-feed \
					"$pullrequest_id" \
					"$SYSTEM_PULLREQUEST_SOURCECOMMITID" \
					"$namespace" \
					"$release_name"
			done

			rm "$deployed_releases_list"
		else
			assert-success commit-changes-and-tag "$tag"
		fi
	fi

	if $is_pullrequest
	then
		# push deploy status to pr
		assert-success pullrequest-set-deploy-status \
			"$pullrequest_id" \
			"$pr_deploy_status"
	fi
}

main $@