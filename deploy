#!/bin/bash

set -e

source <(otc-task-include lib/filesystem.sh)
source <(otc-task-include lib/vsts.sh)
source <(otc-task-include lib/dotnet.sh)
source <(otc-task-include lib/docker.sh)
source <(otc-task-include lib/helm.sh)
source <(otc-task-include lib/deploy.sh)

ORGANIZATION="oleconsignado"

namespace=$1
configuration=$2

if [ -z "$namespace" ]
then
	echo "Missing namespace"
	echo "Usage: $0 namespace configuration"
	exit 1
fi

if [ -z "$configuration" ]
then
	echo "Missing configuration"
	echo "Usage: $0 namespace configuration"
	exit 1
fi

is_pullrequest=false

if [ "$BUILD_REASON" = "PullRequest" ]
then
	is_pullrequest=true
	pullrequest_id=$SYSTEM_PULLREQUEST_PULLREQUESTID
fi

# Required environment variables:
# - BUILD_REPOSITORY_URI
# - VCS_TOKEN
# - BUILD_SOURCEBRANCHNAME
# - BUILD_SOURCEVERSION
# - BUILD_REQUESTEDFOR
# - BUILD_REQUESTEDFOREMAIL
function prepare-local-repo-for-changes
{
	local repo_uri_with_creedentials=$(echo $BUILD_REPOSITORY_URI | \
		sed -r "s/(^https?:\/\/)(.*)/\\1_:$VCS_TOKEN@\2/")

	if git remote | grep authrepo > /dev/null 2>&1 
	then
		git remote rm authrepo > /dev/null 2>&1
	fi

	git remote add authrepo $repo_uri_with_creedentials > /dev/null 2>&1 

	git checkout $BUILD_SOURCEBRANCHNAME
	git pull authrepo $BUILD_SOURCEBRANCHNAME
	local last_commit=$(git log --format="%H" -n 1)

	if [ "$last_commit" != "$BUILD_SOURCEVERSION" ]
	then
		echo "HEAD changed (expected $BUILD_SOURCEVERSION but $last_commit)"
		exit 10
	fi

	git config user.name "$BUILD_REQUESTEDFOR"
	git config user.email "$BUILD_REQUESTEDFOREMAIL"
}

TAG_AND_COMMIT_CHANGES_MISS_TAG=21
TAG_AND_COMMIT_CHANGES_PUSH_ERROR=22

# Param tag
# Required environmento variables:
# - BUILD_SOURCEBRANCHNAME
# - BUILD_SOURCEVERSION
function commit-changes-and-tag
{
	tag=$1

	if [ -z "$tag" ]
	then
		echo "commit-changes-and-tag: missing tag" >&2
		return $TAG_AND_COMMIT_CHANGES_MISS_TAG
	fi

	echo "Comminting changes to remote repository ..."

	git status
	git commit -m "Build $tag [skip ci]"
	git tag "$tag"

	if ! git push -u authrepo $BUILD_SOURCEBRANCHNAME --tags > gitpush.log 2>&1 # prevent expose creedential
	then
		echo "commit-changes-and-tag: git push error." >&2
		return $TAG_AND_COMMIT_CHANGES_PUSH_ERROR
	fi

	git remote rm authrepo > /dev/null 2>&1
	git checkout $BUILD_SOURCEVERSION > /dev/null 2>&1	
}

artifact_suffix=''

if $is_pullrequest
then
	artifact_suffix="-eph-pr$pullrequest_id"
	tag="$(echo $SYSTEM_PULLREQUEST_SOURCECOMMITID | \
		egrep -o '^[0-9a-f]{8}')-$BUILD_BUILDID"
else
	tag="v$BUILD_BUILDID"
	prepare-local-repo-for-changes
fi

solution_dir="$BUILD_SOURCESDIRECTORY/Source"
deployed_releases_list=$(mktemp --suffix="dep-rel-$BUILD_BUILDID")

if deploy "$solution_dir" "$configuration" "$tag" "$namespace" "$artifact_suffix" "$deployed_releases_list"
then
	if $is_pullrequest
	then
		for release_name in $(cat "$deployed_releases_list")
		do		
			commit_short=$(echo $SYSTEM_PULLREQUEST_SOURCECOMMITID | egrep -o '^[0-9a-f]{8}')
			preview_url="http://$(kubectl -n $namespace get ingress -l release=$release_name -ojson | \
				jq -r '.items[].spec.rules[].host')/"

			comment_text="Foi publicado uma prévia da aplicação no endereço [$preview_url]($preview_url). \
A versão publicada corresponde ao commit \
[$commit_short]($SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI/commit/$SYSTEM_PULLREQUEST_SOURCECOMMITID) \
e ela estará disponível enquanto este *Pull Request* estiver aberto."
    		comment_id=$(vsts-comment-pull-request $pullrequest_id "$comment_text")
    		vsts-pull-request-comment-change-status $pullrequest_id $comment_id 4 # 4 = closed
		done

		rm "$deployed_releases_list"
	else
		commit-changes-and-tag "$tag"
	fi
else
	exit 11
fi

