#!/bin/bash

set -e

source <(otc-task-include lib/git.sh)
source <(otc-task-include lib/assert.sh)
source <(otc-task-include lib/vsts.sh)
source <(otc-task-include lib/console.sh)
source <(otc-task-include lib/azure-pipelines-yaml-protection.sh)
source <(otc-task-include lib/vsts-pr-statuses.sh)

# Param lines_threshold
# Param lines_include_pattern (optional)
# Param lines_exclude_pattern (optional)
# Required environment variables:
#  - SYSTEM_PULLREQUEST_PULLREQUESTID
function size-validation
{
	local lines_threshold=$1
	local lines_include_pattern="$2"
	local lines_exclude_pattern="$3"
	assert-not-empty lines_threshold
	assert-not-empty SYSTEM_PULLREQUEST_PULLREQUESTID
	local pullrequest_id=$SYSTEM_PULLREQUEST_PULLREQUESTID
	local lines_changed=$(count-changed-lines $(get-base-branch) \
		"$pullrequest_id" "$lines_include_pattern" "$lines_exclude_pattern")
	if [ "$lines_changed" -gt "$lines_threshold" ]
	then
		pullrequest-set-size-status "$pullrequest_id" "failed" \
			"Size validation failed (actual size $lines_changed, threshold $lines_threshold)"
		red "Pull request size ($lines_changed lines) exceeds threshold ($lines_threshold)."
	else
		pullrequest-set-size-status "$pullrequest_id" "succeeded" \
			"Size validation succeeded (actual size $lines_changed, threshold $lines_threshold)"
		green "Pull Request size validation succeeded."
	fi
}

# Param pullrequest_id
function reset-pr-statuses
{
	local pullrequest_id="$1"
	assert-not-empty pullrequest_id
	pullrequest-set-quality-gate-status $pullrequest_id "pending"
	pullrequest-set-size-status $pullrequest_id "pending"
	pullrequest-set-deploy-status $pullrequest_id "pending"
}

reset-pr-statuses
azure-pipelines-yaml-protection
size-validation "$@"
