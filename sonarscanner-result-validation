#!/bin/bash

set -e

source <(otc-task-include lib/assert.sh)
source <(otc-task-include lib/vsts.sh)
source <(otc-task-include lib/console.sh)
source <(otc-task-include lib/sonar.sh)

# Param pullrequest_id
# Param state (see https://docs.microsoft.com/en-us/rest/api/azure/devops/git/pull%20request%20statuses/create?view=azure-devops-rest-5.1#gitstatusstate)
# Param report_url
# Para description (optional)
function pullrequest-set-quality-gate-status
{
	local pullrequest_id="$1"
	local state="$2"
	local report_url="$3"
	local description="$4"
	assert-not-empty pullrequest_id
	assert-not-empty state
	assert-not-empty report_url
	vsts-pr-push-status \
		"$pullrequest_id" \
		"analysis" \
		"sonarqube" \
		"$state" \
		"$report_url" \
		"$description" > /dev/null	
}

SONARSCANNER_END_OUTPUT_FILE='sonarscanner-end-output'

function main
{
	local pullrequest_id=$SYSTEM_PULLREQUEST_PULLREQUESTID
	assert-not-empty pullrequest_id
	local analysis_report=$(mktemp -t \
		"pr-sonar-report-url-${pullrequest_id}-XXXXXXXX")
	
	if sonar-analysis-validation $pullrequest_id > $analysis_report
	then
		pullrequest-set-quality-gate-status \
			"$pullrequest_id" \
			"succeeded" \
			"$(cat $analysis_report)" \
			"Static analysis passed"

	elif [ "$?" -eq "$SONAR_ANALYSIS_VALIDATION_FAILED" ]
	then
		pullrequest-set-quality-gate-status \
			"$pullrequest_id" \
			"failed" \
			"$(cat $analysis_report)" \
			"Static analysis failed"
	else
		local error_code=$?
		red "ERROR: Sonar analysis validation returned $error_code" >&2
		return $error_code # will exit with error code
	fi
}

main $@
